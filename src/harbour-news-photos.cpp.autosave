#ifdef QT_QML_DEBUG
#include <QtQuick>
#endif

#include <sailfishapp.h>
#include "downloader.h"

// Maybe not necessary:
#include <QJsonArray>
#include <QJsonObject>

int main(int argc, char *argv[])
{

    // Get App and QML-View objects
    QScopedPointer<QGuiApplication> app(SailfishApp::application(argc, argv));
    QScopedPointer<QQuickView> view(SailfishApp::createView());

    // Set some global values
    app->setOrganizationName("harbour-news-photos");
    app->setOrganizationDomain("harbour-news-photos");
    app->setApplicationName("harbour-news-photos");
    app->setApplicationVersion(APP_VERSION);

    // Register FileIO Class
    qmlRegisterType<FileIO, 1>("harbour.news-photos.FileIO", 1, 0, "FileIO");

    // Prepare the QML and set Homedir
    view->setSource(SailfishApp::pathTo("qml/harbour-news-photos.qml"));
    view->rootContext()->setContextProperty("XDG_HOME_DIR", QStandardPaths::writableLocation(QStandardPaths::HomeLocation));
    view->rootContext()->setContextProperty("XDG_CACHE_DIR", QStandardPaths::writableLocation(QStandardPaths::CacheLocation));
    view->engine()->addImageProvider("qqrencoder", new QQRencoder());
    view->show();

    return app->exec;
}

// SailfishApp::main() will display "qml/harbour-news-photos.qml", if you need more
// control over initialization, you can use:
//
//   - SailfishApp::application(int, char *[]) to get the QGuiApplication *
//   - SailfishApp::createView() to get a new QQuickView * instance
//   - SailfishApp::pathTo(QString) to get a QUrl to a resource file
//   - SailfishApp::pathToMainQml() to get a QUrl to the main QML file
//
// To display the view, call "show()" (will show fullscreen on device).
